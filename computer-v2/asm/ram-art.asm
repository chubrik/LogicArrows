; ##################################################################################################
; ##           Source code for the "RAM Art" program for a computer made of logic arrows          ##
; ##            Исходный код программы "RAM Art" для компьютера из логических стрелочек           ##
; ##                 https://github.com/chubrik/LogicArrows/tree/main/computer-v2                 ##
; ##                         (с) 2025 Arkadi Chubrik (arkadi@chubrik.org)                         ##
; ##################################################################################################


INC_C       equ 0x6A                    ; Код инструкции "inc c"
HLT         equ 0x01                    ; Код инструкции "hlt"

start:          jmp stage1

; Левая часть изображения, кроме первых двух байт, которые восстанавливаем в блоке "stage1"
data1       db                          0b11100011, 0b00000010,

                0b10100111, 0b11100010, 0b00100000, 0b10000101,
                0b00100100, 0b00000000, 0b00000011, 0b11100100,
                0b01000100, 0b00000010, 0b00000000, 0b00000010,
                0b10100000, 0b00110011, 0b11100011, 0b11100101,

                0b10000001, 0b11100010, 0b00000001, 0b10000001,
                0b01000010, 0b00100000, 0b00000010, 0b01100010,
                0b10100011, 0b11100011, 0b11110000, 0b00000101,
                0b00100000, 0b00110010, 0b01000011, 0b11000100

data1_end   equ $ - 1

; Цикл верхнего уровня, перебирающий банки памяти для записи
bank_start:     ld a, bank
                dec a
bank_set:       st a, bank
                ldi d, 0xFF             ; Указатель для записи

; Цикл среднего уровня, перебирающий байты источника.
; Регистр C уже содержит указатель для чтения.
byte_start:     dec c                   ; Заменяемое направление движения по источнику
byte_jmp:       js stage2               ; Заменяемый адрес для перехода
                inc b

; Цикл нижнего уровня, перебирающий биты в байте источника
bit_start:      ld a, c
                and a, b
                jz bit_end

; Запись в RAM, визуально приводящая к появлению "пикселя"
                ldi a, 0xFF
                st a, d

; Завершение цикла того или иного уровня
bit_end:        shl b
                dec d
                jnc bit_start
                js byte_start
                jmp bank_start

in_out      db  0
bank        db  4                       ; Банк памяти не подключается при загрузке с дискеты,
                                        ;   однако при декрементации значения позволяет начать
                                        ;   запись с правильного места

; Правая часть изображения
data2       db  0b00000010, 0b10000000, 0b00000000, 0b01000000,
                0b00000001, 0b10000000, 0b00000000, 0b10000000,
                0b00000101, 0b00000000, 0b00000000, 0b10100000,
                0b00000010, 0b11000000, 0b00000001, 0b01000000,

                0b00000100, 0b00100000, 0b00000010, 0b00100000,
                0b00000101, 0b11000000, 0b00000001, 0b10100000,
                0b00000010, 0b00000000, 0b00000000, 0b01000000,
                0b00000001, 0b11100000, 0b00000011, 0b10000000,

                0b10100101, 0b00000111, 0b00000010, 0b10100000,
                0b00000010, 0b11100000, 0b00000001, 0b01000000,
                0b00000100, 0b00000011, 0b00000000, 0b00100000,
                0b10100101, 0b00100100, 0b00000001, 0b10100000,

                0b00000010, 0b10100010, 0b00100010, 0b01000001,
                0b00000001, 0b11000000, 0b10100001, 0b10000010,
                0b11100101, 0b00000011, 0b11000000, 0b10100001,
                0b00100010, 0b10000000, 0b00000001, 0b01000000

; Готовимся к выводу левой части изображения
stage1:         ldi c, 0b01000000       ; Восстанавливаем первые два байта в левой части изображения
                ldi d, 0b00000011
                st c, b                 ; b = 0x00
                st d, 0x01
                ldi c, data1_end + 1    ; Указатель на источник
                jmp bank_start

; Готовимся к выводу правой части изображения
stage2:         ldi c, INC_C            ; Заменяем направление движения по источнику
                st c, byte_start
                st b, byte_jmp + 1      ; Заменяем адрес выхода из цикла на 0x00
                ldi c, HLT              ; Вписываем инструкцию завершения программы по адресу 0x00
                st c, b
                ldi a, 7                ; Номер самого правого банка памяти
                ldi c, data2 - 1        ; Указатель на источник
                jmp bank_set
