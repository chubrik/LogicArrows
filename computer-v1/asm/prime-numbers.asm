; ##################################################################################################
; ##        Source code for the "Prime Numbers" program for a computer made of logic arrows       ##
; ##         Исходный код программы "Prime Numbers" для компьютера из логических стрелочек        ##
; ##                 https://github.com/chubrik/LogicArrows/tree/main/computer-v1                 ##
; ##                         (с) 2023 Arkadi Chubrik (arkadi@chubrik.org)                         ##
; ##################################################################################################


        ldi a, 0x80         ; Код для подключения дисплея
        st a, 0x3F          ; Подключаем вывод
        ldi b, 2            ; Первое простое число 2
        ldi d, 0x41         ; Указатель на дисплее для первого числа
        st b, d             ; Выводим число на дисплей
        inc b               ; Второе простое число 3
        inc d               ; Дважды смещаем указатель на дисплее, чтобы перейти на следующий ряд
        inc d
        st b, d             ; Выводим число на дисплей

; Цикл подбора кандидатов на простые числа
next:   inc b               ; Дважды инкрементируем число-кандидат - идём только по нечётным числам
        inc b
        ldi d, 0x41         ; Устанавливаем указатель на первое простое число на дисплее

; Цикл подбора множителей среди уже найденных простых чисел
factor: inc d               ; Смещаем указатель на следующее простое число на дисплее
        inc d
        ld c, d             ; Берём простое число с дисплея в качестве множителя
        mov a, b            ; Копируем число-кандидат
        shr a               ; Делим его на 2
        sub a, c            ; Вычитаем из него текущий множитель
        js prime            ; Если множитель больше половины числа-кандидата, то результат будет
                            ;   меньше нуля, и значит дальше подбирать множители нет смысла - мы
                            ;   уже нашли новое простое число
        mov a, b            ; Копируем число-кандидат

; Цикл вычитания множителя из числа-кандидата
loop:   sub a, c            ; Вычитание
        jz next             ; Если результат равен нулю, значит число не простое, переходим к
                            ;   следующему кандидату
        jns loop            ; Если результат больше нуля, продолжаем вычитать

        jmp factor          ; Если результат меньше нуля, переходим к следующему множителю

; Работаем с найденным простым числом
prime:  ld d, last          ; Читаем указатель на последнее найденное простое число на дисплее
        inc d               ; Смещаем указатель на ряд ниже
        inc d
        st d, last          ; Сохраняем указатель
        st b, d             ; Выводим новое простое число на дисплей
        ldi a, 0x5F         ; Берём указатель на последнее возможное место в нижнем ряду дисплея
        xor a, d            ; Сравниваем два указателя
        jnz next            ; Если они не равны, переходим к рассмотрению следующего
                            ;   числа-кандидата

        hlt                 ; Завершаем выполнение программы

last db 0x43                ; Указатель на последнее найденное простое число на дисплее
